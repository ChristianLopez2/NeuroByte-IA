window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "main.Settings", "modulename": "main", "qualname": "Settings", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "main.Settings.BASE_DIR", "modulename": "main", "qualname": "Settings.BASE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA&#x27;)"}, {"fullname": "main.Settings.UPLOAD_DIR", "modulename": "main", "qualname": "Settings.UPLOAD_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/uploads/pdf&#x27;)"}, {"fullname": "main.Settings.KNOWLEDGE_DIR", "modulename": "main", "qualname": "Settings.KNOWLEDGE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/knowledge/pdf&#x27;)"}, {"fullname": "main.Settings.VECTOR_DIR", "modulename": "main", "qualname": "Settings.VECTOR_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/vector_db&#x27;)"}, {"fullname": "main.Settings.BASE_COLLECTION", "modulename": "main", "qualname": "Settings.BASE_COLLECTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;licitaciones_base&#x27;"}, {"fullname": "main.Settings.UPLOADS_COLLECTION", "modulename": "main", "qualname": "Settings.UPLOADS_COLLECTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;licitaciones_uploads&#x27;"}, {"fullname": "main.Settings.OPENAI_API_KEY", "modulename": "main", "qualname": "Settings.OPENAI_API_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "$OPENAI_API_KEY"}, {"fullname": "main.Settings.EMBEDDING_MODEL", "modulename": "main", "qualname": "Settings.EMBEDDING_MODEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;text-embedding-3-small&#x27;"}, {"fullname": "main.Settings.CHAT_MODEL", "modulename": "main", "qualname": "Settings.CHAT_MODEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;gpt-4o-mini&#x27;"}, {"fullname": "main.Settings.CHUNK_SIZE", "modulename": "main", "qualname": "Settings.CHUNK_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1200"}, {"fullname": "main.Settings.CHUNK_OVERLAP", "modulename": "main", "qualname": "Settings.CHUNK_OVERLAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "120"}, {"fullname": "main.Settings.CTX_MAX_CHARS_PER_DOC", "modulename": "main", "qualname": "Settings.CTX_MAX_CHARS_PER_DOC", "kind": "variable", "doc": "<p></p>\n", "default_value": "12000"}, {"fullname": "main.Settings.CTX_HEAD_PER_DOC", "modulename": "main", "qualname": "Settings.CTX_HEAD_PER_DOC", "kind": "variable", "doc": "<p></p>\n", "default_value": "6000"}, {"fullname": "main.Settings.K_BASE", "modulename": "main", "qualname": "Settings.K_BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "main.Settings.K_UP", "modulename": "main", "qualname": "Settings.K_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "main.Settings.ENABLE_OCR", "modulename": "main", "qualname": "Settings.ENABLE_OCR", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "main.Settings.FRONTEND_ORIGIN", "modulename": "main", "qualname": "Settings.FRONTEND_ORIGIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;*&#x27;"}, {"fullname": "main.Settings.SRI_RUC_URL", "modulename": "main", "qualname": "Settings.SRI_RUC_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://srienlinea.sri.gob.ec/sri-catastro-sujeto-servicio-internet/rest/ConsolidadoContribuyente/obtenerPorNumerosRuc?&amp;ruc={ruc}&#x27;"}, {"fullname": "main.Settings.STRICT_BASE", "modulename": "main", "qualname": "Settings.STRICT_BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "main.S", "modulename": "main", "qualname": "S", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;main.Settings object&gt;"}, {"fullname": "main.ANALYSIS_BY_RUC", "modulename": "main", "qualname": "ANALYSIS_BY_RUC", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Dict[str, Any]]", "default_value": "{}"}, {"fullname": "main.UPLOAD_RUC_INDEX", "modulename": "main", "qualname": "UPLOAD_RUC_INDEX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Optional[str]]", "default_value": "{}"}, {"fullname": "main.ANALYSIS_LOCK", "modulename": "main", "qualname": "ANALYSIS_LOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;asyncio.locks.Lock object at 0x00000216425DE3C0 [unlocked]&gt;"}, {"fullname": "main.MASTER_PATH", "modulename": "main", "qualname": "MASTER_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/data/master.json&#x27;)"}, {"fullname": "main.load_master", "modulename": "main", "qualname": "load_master", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.save_master", "modulename": "main", "qualname": "save_master", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.merge_into_master", "modulename": "main", "qualname": "merge_into_master", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">partial</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.CURRENT_PROCESS", "modulename": "main", "qualname": "CURRENT_PROCESS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict]", "default_value": "None"}, {"fullname": "main.PROCESS_HINT_PATH", "modulename": "main", "qualname": "PROCESS_HINT_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/data/process_hint.json&#x27;)"}, {"fullname": "main.app", "modulename": "main", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.applications.FastAPI object&gt;"}, {"fullname": "main.ocr_image", "modulename": "main", "qualname": "ocr_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.extract_text_from_pdf", "modulename": "main", "qualname": "extract_text_from_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">enable_ocr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.extract_text_head", "modulename": "main", "qualname": "extract_text_head", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pdf_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">enable_ocr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_chars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.extract_text_head_from_bytes", "modulename": "main", "qualname": "extract_text_head_from_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_bytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">max_chars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6000</span>, </span><span class=\"param\"><span class=\"n\">enable_ocr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.to_documents", "modulename": "main", "qualname": "to_documents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.KBConfig", "modulename": "main", "qualname": "KBConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "main.KBConfig.__init__", "modulename": "main", "qualname": "KBConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "main.KBConfig.raw", "modulename": "main", "qualname": "KBConfig.raw", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.KBConfig.facets", "modulename": "main", "qualname": "KBConfig.facets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.KBConfig.bundles", "modulename": "main", "qualname": "KBConfig.bundles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.KBConfig.match_facets", "modulename": "main", "qualname": "KBConfig.match_facets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.KBConfig.find_bundle", "modulename": "main", "qualname": "KBConfig.find_bundle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">familia</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">procedimiento</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.CFG", "modulename": "main", "qualname": "CFG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;main.KBConfig object&gt;"}, {"fullname": "main.derive_meta_from_kb_path_and_name", "modulename": "main", "qualname": "derive_meta_from_kb_path_and_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.index_knowledge_tree", "modulename": "main", "qualname": "index_knowledge_tree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kb_root</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.classify_upload", "modulename": "main", "qualname": "classify_upload", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.index_uploaded_pdf", "modulename": "main", "qualname": "index_uploaded_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.make_llm", "modulename": "main", "qualname": "make_llm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">langchain_openai</span><span class=\"o\">.</span><span class=\"n\">chat_models</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ChatOpenAI</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.RUC_RE", "modulename": "main", "qualname": "RUC_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;\\\\b(\\\\d{13})\\\\b&#x27;)"}, {"fullname": "main.fetch_ruc_info", "modulename": "main", "qualname": "fetch_ruc_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ruc</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "main.extract_ruc_from_offer_stem", "modulename": "main", "qualname": "extract_ruc_from_offer_stem", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.validate_ruc_for_offer", "modulename": "main", "qualname": "validate_ruc_for_offer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "main.extract_ruc_from_pdf_bytes", "modulename": "main", "qualname": "extract_ruc_from_pdf_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_bytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "main.PROC_ID_RE", "modulename": "main", "qualname": "PROC_ID_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;\\\\b[A-Z]{2,}(?:-[A-Z0-9]{2,}){1,4}-\\\\d{4}-\\\\d{2,4}\\\\b&#x27;)"}, {"fullname": "main.MONEY_RE", "modulename": "main", "qualname": "MONEY_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;(?:(?:USD|US\\\\$|\\\\$)\\\\s?)(\\\\d{1,3}(?:[.,]\\\\d{3})*(?:[.,]\\\\d{2})?|\\\\d+)\\\\b&#x27;)"}, {"fullname": "main.DAYS_RE", "modulename": "main", "qualname": "DAYS_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;\\\\b(\\\\d{1,4})\\\\s*d[i\u00ed]as\\\\b&#x27;, re.IGNORECASE)"}, {"fullname": "main.CLAUSE_RE", "modulename": "main", "qualname": "CLAUSE_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;cl[\u00e1a]usula\\\\s+([0-9A-Za-z\\\\.\\\\-]+)&#x27;, re.IGNORECASE)"}, {"fullname": "main.REQ_POS", "modulename": "main", "qualname": "REQ_POS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;deber\u00e1&#x27;, &#x27;debe&#x27;, &#x27;deben&#x27;, &#x27;deber\u00e1n&#x27;, &#x27;presentar&#x27;, &#x27;adjuntar&#x27;, &#x27;entregar&#x27;, &#x27;contar con&#x27;, &#x27;acreditar&#x27;, &#x27;vigencia&#x27;, &#x27;garant\u00eda&#x27;, &#x27;garantias&#x27;, &#x27;garant\u00edas&#x27;, &#x27;certificaci\u00f3n&#x27;, &#x27;certificacion&#x27;, &#x27;iso&#x27;, &#x27;ruc&#x27;, &#x27;experiencia&#x27;, &#x27;plazo&#x27;, &#x27;cronograma&#x27;)"}, {"fullname": "main.REQ_NEG", "modulename": "main", "qualname": "REQ_NEG", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;conclusiones&#x27;, &#x27;clausura&#x27;, &#x27;an\u00e1lisis&#x27;, &#x27;analisis&#x27;, &#x27;\u00edndice&#x27;, &#x27;indice&#x27;, &#x27;marco&#x27;, &#x27;glosario&#x27;)"}, {"fullname": "main.BASE_COST_KW", "modulename": "main", "qualname": "BASE_COST_KW", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;presupuesto&#x27;, &#x27;referencial&#x27;, &#x27;estimado&#x27;, &#x27;base&#x27;, &#x27;precio referencial&#x27;, &#x27;monto referencial&#x27;, &#x27;valor referencial&#x27;)"}, {"fullname": "main.BASE_PLAZO_KW", "modulename": "main", "qualname": "BASE_PLAZO_KW", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;plazo&#x27;, &#x27;ejecuci\u00f3n&#x27;, &#x27;ejecucion&#x27;, &#x27;entrega&#x27;)"}, {"fullname": "main.OF_COST_KW", "modulename": "main", "qualname": "OF_COST_KW", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;oferta&#x27;, &#x27;ofertado&#x27;, &#x27;propuesta&#x27;, &#x27;cotizaci\u00f3n&#x27;, &#x27;cotizacion&#x27;, &#x27;valor de la oferta&#x27;, &#x27;monto de la oferta&#x27;)"}, {"fullname": "main.OF_PLAZO_KW", "modulename": "main", "qualname": "OF_PLAZO_KW", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;plazo&#x27;, &#x27;oferta&#x27;, &#x27;ejecuci\u00f3n&#x27;, &#x27;ejecucion&#x27;, &#x27;entrega&#x27;)"}, {"fullname": "main.extract_candidates", "modulename": "main", "qualname": "extract_candidates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx_offer</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">archivo_stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.UNIFIED_MASTER_PROMPT", "modulename": "main", "qualname": "UNIFIED_MASTER_PROMPT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\nEres un experto en licitaciones y contrataci\u00f3n p\u00fablica. Recibir\u00e1s varios BLOQUES_DE_ENTRADA,\\nuno por cada OFERTA, y para todos ellos deber\u00e1s producir **un \u00fanico JSON final** con dos partes:\\n\\n- respuesta1: narrativa (100% TEXTO humano) por archivo + un comparativo en TEXTO.\\n- respuesta2: JSON de decisi\u00f3n por archivo con el esquema exacto solicitado.\\n\\nREGLAS GENERALES (NO INVENTES):\\n- Usa SOLO la informaci\u00f3n del CONTEXTO RAG y de CANDIDATOS_CONFIABLES provistos en cada bloque.\\n- Si un dato no est\u00e1 en esos insumos, debes dejarlo en null (o [] seg\u00fan corresponda).\\n- Cuando cites documentos, usa SOLO el nombre tras \\&#x27;### DOC:\\&#x27; (sin .pdf ni colecci\u00f3n).\\n- No incluyas texto fuera del JSON final. Sin backticks, sin comentarios.\\n\\n# ESTRUCTURA DE SALIDA (OBLIGATORIA)\\nDevuelve UN \u00daNICO JSON **v\u00e1lido** exactamente con esta forma:\\n\\n{\\n  &quot;respuesta1&quot;: {\\n    &quot;por_archivo&quot;: [\\n      { &quot;archivo&quot;: &quot;&lt;stem&gt;&quot;, &quot;texto&quot;: &quot;&lt;narrativa legible y ordenada&gt;&quot; }\\n    ],\\n    &quot;comparativo_texto&quot;: &quot;&lt;texto corto con el mejor cumplimiento y diferencias m\u00e1s relevantes&gt;&quot;\\n  },\\n  &quot;respuesta2&quot;: {\\n    &quot;por_archivo&quot;: [\\n      { &quot;archivo&quot;: &quot;&lt;stem&gt;&quot;,\\n        &quot;destino&quot;: {\\n            &quot;familia&quot;: &quot;&lt;string|null&gt;&quot;,\\n            &quot;procedimiento&quot;: &quot;&lt;string|null&gt;&quot;,\\n            &quot;label&quot;: &quot;&lt;familia&gt; \u2014 &lt;procedimiento&gt;|null&quot;\\n        },\\n        &quot;json&quot;: {\\n          &quot;secciones&quot;: {\\n            &quot;legales&quot;:    [&quot;...&quot;],\\n            &quot;tecnicas&quot;:   [&quot;...&quot;],\\n            &quot;economicas&quot;: [&quot;...&quot;],\\n            &quot;otros&quot;:      [&quot;...&quot;]\\n          },\\n          &quot;procesoId&quot;: &quot;&lt;string|null&gt;&quot;,\\n          &quot;referencia&quot;: { &quot;costo&quot;: &lt;number|null&gt;, &quot;plazo_dias&quot;: &lt;number|null&gt; },\\n          &quot;requisitos&quot;: [\\n            { &quot;id&quot;: &quot;R-001&quot;, &quot;categoria&quot;: &quot;Legal|Tecnica|Economica&quot;, &quot;sub&quot;: &quot;&lt;string|null&gt;&quot;,\\n              &quot;texto&quot;: &quot;&lt;CITA LITERAL&gt;&quot;, &quot;peso&quot;: &lt;number&gt;, &quot;clausula&quot;: &quot;&lt;string|null&gt;&quot;, &quot;pagina&quot;: &lt;number|null&gt; }\\n          ],\\n          &quot;oferentes&quot;: [\\n            { &quot;id&quot;: &quot;O1&quot;, &quot;nombre&quot;: &quot;&lt;string|null&gt;&quot;, &quot;costo&quot;: &lt;number|null&gt;, &quot;plazo_dias&quot;: &lt;number|null&gt;,\\n              &quot;cumplimientos&quot;: [ { &quot;reqId&quot;: &quot;R-001&quot;, &quot;estado&quot;: &quot;CUMPLE|PARCIAL|NO CUMPLE&quot;, &quot;evidencia&quot;: &quot;&lt;string|null&gt;&quot; } ],\\n              &quot;riesgos&quot;: [ { &quot;nivel&quot;: &quot;ALTO|MEDIO|BAJO&quot;, &quot;clausula&quot;: &quot;&lt;string|null&gt;&quot;, &quot;pagina&quot;: &lt;number|null&gt;, &quot;descripcion&quot;: &quot;&lt;string&gt;&quot; } ]\\n            }\\n          ],\\n          &quot;riesgos&quot;: [\\n            {&quot;tipo&quot;: &quot;legal|tecnico|economico&quot;, &quot;detalle&quot;: &quot;&lt;texto&gt;&quot;, &quot;critico&quot;: true|false}\\n          ],\\n          &quot;diferencias_clave&quot;: [\\n            {&quot;tema&quot;: &quot;plazo|monto|garantias|otros&quot;, &quot;base&quot;: &quot;...&quot;, &quot;oferente&quot;: &quot;...&quot;, &quot;impacto&quot;: &quot;bajo|medio|alto&quot;}\\n          ],\\n          &quot;recomendaciones&quot;: [&quot;...&quot;],\\n          &quot;ruc_validacion&quot;: {\\n            &quot;ruc&quot;: &quot;&lt;string|null&gt;&quot;,\\n            &quot;nombre&quot;: &quot;&lt;string|null&gt;&quot;,\\n            &quot;habilitado&quot;: true|false|null,\\n            &quot;notas&quot;: &quot;&lt;string|null&gt;&quot;\\n          },\\n          &quot;semaforo&quot;: &quot;aprobado|faltan_requisitos|no_cumple&quot;,\\n          &quot;pesosCategoria&quot;: { &quot;Legal&quot;: &lt;number&gt;, &quot;Tecnica&quot;: &lt;number&gt;, &quot;Economica&quot;: &lt;number&gt; }\\n      } }\\n    ]\\n  }\\n}\\n\\n# CRITERIOS ESPEC\u00cdFICOS PARA \\&#x27;respuesta2.json\\&#x27;\\n- &quot;destino&quot;: tomarlo EXCLUSIVAMENTE del BLOQUE: Dejar destino = label;\\n- &quot;procesoId&quot;: toma EXACTAMENTE de base.procesoIds (si no hay \u2192 null);\\n- &quot;referencia.costo&quot; y &quot;referencia.plazo_dias&quot;: SOLO de base.costos / base.plazos_dias (si no hay \u2192 null);\\n- &quot;oferentes[0].nombre&quot;: SOLO de oferta.nombres_posibles, NUNCA usar el nombre del archivo, ni el contenido de la BASE\\n    \u00daNICAMENTE buscar en el texto de la OFERTA (fuente oferta o documentos adjuntos que correspondan a la oferta).\\n    Prioridad de b\u00fasqueda:\\n        Raz\u00f3n social que aparezca junto a frases como:\\n        \u201cAdjudicado a: \u2026\u201d\\n        \u201cContratista: \u2026\u201d\\n        \u201cProveedor: \u2026\u201d\\n        \u201cRaz\u00f3n Social: \u2026\u201d\\n        \u201cEntre \u2026 y \u2026\u201d\\n        Raz\u00f3n social que aparezca asociada a un RUC detectado en la OFERTA.\\n        El texto detectado debe usarse tal cual aparece (no abreviar, no traducir, no corregir ortograf\u00eda).\\n        Si no hay coincidencia clara en la OFERTA, dejar nombre como null\\n    ; \\n- &quot;costo&quot;/&quot;plazo_dias&quot;: SOLO de oferta.costos / oferta.plazos_dias.\\n- &quot;requisitos&quot;: cada &quot;texto&quot; debe ser **cita literal** de base.req_samples (sin parafrasear). Incluye 5\u201320 si hay suficientes.\\n  - &quot;clausula&quot;: intenta mapear con base.clausulas; si no aplica \u2192 null.\\n  - &quot;peso&quot;: si no hay criterio, usa 1.0; rango [0.5, 2.0].\\n- &quot;cumplimientos&quot;: decide CUMPLE/PARCIAL/NO CUMPLE comparando literalmente el requisito con el contenido de la OFERTA; si no hay evidencia \u2192 &quot;NO CUMPLE&quot;.\\n- &quot;riesgos&quot;: marca &quot;critico&quot;: true cuando afecte garant\u00edas, multas, plazos o pagos de forma material.\\n- &quot;secciones&quot;: reparte frases/\u00edtems detectados en cada \u00e1mbito (legales/t\u00e9cnicas/econ\u00f3micas/otros).\\n- &quot;semaforo&quot;: aprobado=0 inconsistencias; faltan_requisitos=1\u20132 no cr\u00edticas; no_cumple=3+ o cr\u00edticas.\\n- &quot;pesosCategoria&quot;: si no hay info expl\u00edcita, usa { &quot;Legal&quot;:0.4, &quot;Tecnica&quot;:0.4, &quot;Economica&quot;:0.2 }.\\n\\n# CRITERIOS PARA \\&#x27;respuesta1.texto\\&#x27; (NARRATIVA)\\n- No repitas datos ya mostrados.\\n- Estructura por archivo:\\n  1) &quot;Oferta: &lt;nombre_archivo_sin_pdf&gt;&quot;\\n  2) Si hay procesoId, mu\u00e9stralo.\\n  3) &quot;Referencia BASE \u2014 costo: &lt;N/D o n\u00famero&gt;, plazo: &lt;N/D o n\u00famero&gt; d\u00edas&quot;\\n  4) &quot;Oferente: &lt;nombre&gt; \u2014 costo: &lt;N/D o n\u00famero&gt;, plazo: &lt;N/D o n\u00famero&gt; d\u00edas&quot;\\n  5) &quot;RUC &lt;num&gt; \u2014 HABILITADO/NO HABILITADO (Raz\u00f3n social: &lt;...&gt;, Estado: &lt;...&gt;)&quot; cuando exista validaci\u00f3n\\n  6) &quot;Sem\u00e1foro: APROBADO/FALTAN_REQUISITOS/NO_CUMPLE&quot;\\n  7) &quot;Cumplimientos relevantes:&quot; 3\u201310 bullets (requisito, evidencia breve, doc base).\\n  8) &quot;Brechas detectadas y acciones:&quot; bullets (requisito, evidencia no encontrada o parcial, ACCI\u00d3N CONCRETA, doc base).\\n  9) &quot;Riesgos del oferente:&quot; [nivel] descripci\u00f3n (cl\u00e1usula, p\u00e1g).\\n  10) &quot;Pesos categor\u00eda: Legal X, T\u00e9cnica Y, Econ\u00f3mica Z&quot; si est\u00e1n.\\n\\n# COMPARATIVO (respuesta1.comparativo_texto)\\n- Resume en 1\u20133 l\u00edneas el &quot;mejor cumplimiento&quot; y 1\u20132 diferencias (plazo, monto, garant\u00edas).\\n\\n# INSUMOS\\n- PREGUNTA_DEL_USUARIO:\\n{USER_Q}\\n\\n- BLOQUES_DE_ENTRADA (solo 1 por llamada):\\n{BLOQUES}\\n&#x27;"}, {"fullname": "main.json_guard", "modulename": "main", "qualname": "json_guard", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.list_processes", "modulename": "main", "qualname": "list_processes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.upload_pdf", "modulename": "main", "qualname": "upload_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">fastapi</span><span class=\"o\">.</span><span class=\"n\">datastructures</span><span class=\"o\">.</span><span class=\"n\">UploadFile</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">familia</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">procedimiento</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "main.list_pdf", "modulename": "main", "qualname": "list_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "main.cambio_tipo_doc", "modulename": "main", "qualname": "cambio_tipo_doc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "main.current_process_hint", "modulename": "main", "qualname": "current_process_hint", "kind": "function", "doc": "<p>Devuelve el proceso detectado autom\u00e1ticamente, si existe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.current_upload_sources", "modulename": "main", "qualname": "current_upload_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.sync_uploads_index", "modulename": "main", "qualname": "sync_uploads_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.api_sync_uploads", "modulename": "main", "qualname": "api_sync_uploads", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "main.pick_base_docs_for_upload", "modulename": "main", "qualname": "pick_base_docs_for_upload", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">upload_meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">k_per_role</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">process_hint</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "main.ProcessHint", "modulename": "main", "qualname": "ProcessHint", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "main.ProcessHint.familia", "modulename": "main", "qualname": "ProcessHint.familia", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "main.ProcessHint.procedimiento", "modulename": "main", "qualname": "ProcessHint.procedimiento", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "main.ProcessHint.model_config", "modulename": "main", "qualname": "ProcessHint.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "main.ChatRequest", "modulename": "main", "qualname": "ChatRequest", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "main.ChatRequest.query", "modulename": "main", "qualname": "ChatRequest.query", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "main.ChatRequest.focus_upload", "modulename": "main", "qualname": "ChatRequest.focus_upload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "main.ChatRequest.process", "modulename": "main", "qualname": "ChatRequest.process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[main.ProcessHint]"}, {"fullname": "main.ChatRequest.model_config", "modulename": "main", "qualname": "ChatRequest.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "main.startup_index_base", "modulename": "main", "qualname": "startup_index_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.chat_endpoint", "modulename": "main", "qualname": "chat_endpoint", "kind": "function", "doc": "<p>Analiza SOLO lo que no est\u00e9 en cach\u00e9 por RUC, mezcla con lo cacheado,\ny devuelve comparativo deduplicado.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">ChatRequest</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "main.list_tipos_licitacion", "modulename": "main", "qualname": "list_tipos_licitacion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.DEST_DIR", "modulename": "main", "qualname": "DEST_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;D:/NeuroByte-IA/static/tipos&#x27;)"}, {"fullname": "main.PERSIST_LOCK", "modulename": "main", "qualname": "PERSIST_LOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;asyncio.locks.Lock object at 0x00000216466CDE50 [unlocked]&gt;"}, {"fullname": "main.PID_RE", "modulename": "main", "qualname": "PID_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^([A-Z0-9]+-[A-Z0-9]+)-(\\\\d{4})-(\\\\d{3,})$&#x27;)"}, {"fullname": "main.persist_respuesta2_items", "modulename": "main", "qualname": "persist_respuesta2_items", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();